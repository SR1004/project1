import pygame
import random

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = pygame.display.Info().current_w, pygame.display.Info().current_h
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREY = (128, 128, 128)
BLOCK_SIZE = 50
PADDLE_WIDTH = 100
PADDLE_HEIGHT = 20
BALL_SIZE = 20
BLOCK_REPLENISH_TIME = 300000  # 5 minutes in milliseconds

# Setup screen
screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)
pygame.display.set_caption("Single Player Ping Pong")
clock = pygame.time.Clock()

# Paddle Class
class Paddle:
    def __init__(self):
        self.x = WIDTH // 2 - PADDLE_WIDTH // 2
        self.y = HEIGHT - 40
        self.width = PADDLE_WIDTH
        self.height = PADDLE_HEIGHT
        self.speed = 10

    def move(self, direction):
        if direction == "left" and self.x > 0:
            self.x -= self.speed
        elif direction == "right" and self.x < WIDTH - self.width:
            self.x += self.speed

    def draw(self):
        pygame.draw.rect(screen, BLUE, (self.x, self.y, self.width, self.height))

# Ball Class
class Ball:
    def __init__(self):
        self.x = WIDTH // 2
        self.y = HEIGHT // 2
        self.size = BALL_SIZE
        self.dx = random.choice([-5, 5])
        self.dy = -5

    def move(self):
        self.x += self.dx
        self.y += self.dy
        if self.x < 0 or self.x > WIDTH - self.size:
            self.dx *= -1
        if self.y < 0:
            self.dy *= -1

    def draw(self):
        pygame.draw.ellipse(screen, RED, (self.x, self.y, self.size, self.size))

    def reset(self):
        self.__init__()

# Block Class
class Block:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.width = BLOCK_SIZE
        self.height = BLOCK_SIZE
        self.active = True

    def draw(self):
        if self.active:
            pygame.draw.rect(screen, GREY, (self.x, self.y, self.width, self.height))

    def deactivate(self):
        self.active = False

# Game Setup
paddle = Paddle()
ball = Ball()
blocks = [Block(x, y) for x in range(0, WIDTH, BLOCK_SIZE) for y in range(0, HEIGHT // 2, BLOCK_SIZE)]
last_replenish_time = pygame.time.get_ticks()

running = True
while running:
    screen.fill(BLACK)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
    
    # Paddle Movement
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        paddle.move("left")
    if keys[pygame.K_RIGHT]:
        paddle.move("right")
    
    # Ball Movement
    ball.move()
    
    # Ball Collision with Paddle
    if paddle.y < ball.y + ball.size < paddle.y + paddle.height and paddle.x < ball.x < paddle.x + paddle.width:
        ball.dy *= -1
    
    # Ball Collision with Blocks
    for block in blocks:
        if block.active and block.x < ball.x < block.x + block.width and block.y < ball.y < block.y + block.height:
            ball.dy *= -1
            block.deactivate()
    
    # Replenish Blocks
    current_time = pygame.time.get_ticks()
    if current_time - last_replenish_time > BLOCK_REPLENISH_TIME:
        blocks = [Block(x, y) for x in range(0, WIDTH, BLOCK_SIZE) for y in range(0, HEIGHT // 2, BLOCK_SIZE)]
        last_replenish_time = current_time

    # Draw Everything
    paddle.draw()
    ball.draw()
    for block in blocks:
        block.draw()
    
    # Check if Ball is Off Screen
    if ball.y > HEIGHT:
        ball.reset()
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()

